c
JSON.parse(response.body)
response.body
c
response
c
response
c
response
c
response.status
response.body
response
c
object.errors.messages
object.errors
object
c
response.body
response.json
response
c
response.status
response.errors
response
c
Event
Event.last
c
object.errors.messagesc
object.errors.methods
object.errors.full_messages
object.errors
object
c
expect(JSON.parse(response.body)).to include('id', 'name', 'attendees')
JSON.parse(response.body)
nJSON.parse(response.body)
n
        expect(response).to have_http_status(200)
response.code
response.status_code
c
response.status
response
c
response.body
response.data
c.data
response
c
n
Event.all.count
Event.all
n
c
current_user.organized_events
@event.save!
@event
n
c
current_user.organized_events
current_user.events
current_user
c
params
c
params
c
params
c
params
c
params
c
params
event_params
c
@event.changed?
@event.has_changed?
@event.dirty?
@event.attendees
@event.attendees << current_user
@event.attendee >> current_user
@event.attendees > current_user
@event.attendees >> current_user
@event.attendees
@event.attendees > current_user
@event.attendees >> current_user
current_user
c
response.parsed_body
response.methods
response
JSON.parse(response)
response.size
response.data
JSON
json
response.json
response
params
event_params
c
cc
c
event_params
c
event_params
c
event_params
c
response
c
response
c
Event.create({:name=>"Event 11", :description=>"Example Description", :date=>Thu, 07 Dec 2023 22:30:59 +0500, :location=>"Example Location", :organizer_id=>124})
DateTime.now
Event.create({:name=>"Event 11", :description=>"Example Description",  :location=>"Example Location", :organizer_id=>124})
Event.create({:name=>"Event 11", :description=>"Example Description", :date=>Thu, 07 Dec 2023 22:30:59 +0500, :location=>"Example Location", :organizer_id=>124})
request
{ event: FactoryBot.attributes_for(:event).merge(organizer_id: organizer.id) }
response
